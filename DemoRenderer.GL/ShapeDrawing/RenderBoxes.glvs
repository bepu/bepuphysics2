#version 450

out gl_PerVertex
{
    vec4 gl_Position;
};

struct Instance
{
    vec3 Position;
    uint PackedColor;
    vec4 Orientation;
    vec3 HalfExtents;
    float Padding0;
};

layout(binding = 0, std140) uniform type_VertexConstants
{
    mat4 Projection;
    vec3 CameraPosition;
    float Padding0;
    vec3 CameraRight;
    float Padding1;
    vec3 CameraUp;
    float Padding2;
    vec3 CameraBackward;
} VertexConstants;

layout(binding = 0, std430) readonly buffer type_StructuredBuffer_Instance
{
    Instance _m0[];
} Instances;

layout(location = 0) out vec3 varying_RayDirection;
layout(location = 1) flat out vec3 varying_Position;
layout(location = 2) flat out uint varying_PackedColor;
layout(location = 3) flat out vec4 varying_Orientation;

void main()
{
    uint _51 = uint(int(uint(gl_VertexID) >> 3u));
    vec3 _63 = Instances._m0[_51].Position - VertexConstants.CameraPosition;
    float _75 = Instances._m0[_51].Orientation.x + Instances._m0[_51].Orientation.x;
    float _77 = Instances._m0[_51].Orientation.y + Instances._m0[_51].Orientation.y;
    float _79 = Instances._m0[_51].Orientation.z + Instances._m0[_51].Orientation.z;
    float _81 = Instances._m0[_51].Orientation.x * _77;
    float _82 = Instances._m0[_51].Orientation.x * _79;
    float _83 = Instances._m0[_51].Orientation.y * _77;
    float _84 = Instances._m0[_51].Orientation.y * _79;
    float _85 = Instances._m0[_51].Orientation.z * _79;
    float _87 = Instances._m0[_51].Orientation.w * _75;
    float _88 = Instances._m0[_51].Orientation.w * _77;
    float _89 = Instances._m0[_51].Orientation.w * _79;
    float _95 = 1.0 - (Instances._m0[_51].Orientation.x * _75);
    vec3 _107 = _63 + (mat3(vec3((1.0 - _83) - _85, _81 + _89, _82 - _88), vec3(_81 - _89, _95 - _85, _84 + _87), vec3(_82 + _88, _84 - _87, _95 - _83)) * (Instances._m0[_51].HalfExtents * (vec3(float((uint(gl_VertexID) & 1u) << 1u), float(uint(gl_VertexID) & 2u), float((uint(gl_VertexID) & 4u) >> 1u)) - vec3(1.0))));
    gl_Position = VertexConstants.Projection * vec4(_107 * mat3(VertexConstants.CameraRight, VertexConstants.CameraUp, VertexConstants.CameraBackward), 1.0);
    varying_RayDirection = _107;
    varying_Position = _63;
    varying_PackedColor = Instances._m0[_51].PackedColor;
    varying_Orientation = Instances._m0[_51].Orientation;
}

