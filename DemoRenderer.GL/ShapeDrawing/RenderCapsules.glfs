#version 450
layout(depth_less) out float gl_FragDepth;

layout(binding = 1, std140) uniform type_PixelConstants
{
    vec3 CameraRightPS;
    float Near;
    vec3 CameraUpPS;
    float Far;
    vec3 CameraBackwardPS;
    float Padding;
    vec2 PixelSizeAtUnitPlane;
} PixelConstants;

layout(location = 0) in vec3 varying_RayDirection;
layout(location = 1) flat in vec3 varying_Position;
layout(location = 2) flat in float varying_Radius;
layout(location = 3) flat in uvec2 varying_PackedOrientation;
layout(location = 4) flat in float varying_HalfLength;
layout(location = 5) flat in uint varying_PackedColor;
layout(location = 0) out vec4 out_var_SV_Target0;

void main()
{
    float _156;
    float _158;
    float _160;
    float _162;
    float _163;
    float _165;
    float _167;
    float _172;
    float _177;
    float _181;
    vec3 _183;
    uint _114 = (varying_PackedOrientation.x & 32768u) << 16u;
    uint _118 = varying_PackedOrientation.x >> 16u;
    uint _124 = (_118 & 32768u) << 16u;
    uint _134 = (varying_PackedOrientation.y & 32768u) << 16u;
    uint _138 = varying_PackedOrientation.y >> 16u;
    uint _144 = (_138 & 32768u) << 16u;
    vec4 _148 = vec4(uintBitsToFloat((floatBitsToUint(float(varying_PackedOrientation.x & 32767u) * 3.0518509447574615478515625e-05) | _114) | _114), uintBitsToFloat((floatBitsToUint(float(_118 & 32767u) * 3.0518509447574615478515625e-05) | _124) | _124), uintBitsToFloat((floatBitsToUint(float(varying_PackedOrientation.y & 32767u) * 3.0518509447574615478515625e-05) | _134) | _134), uintBitsToFloat((floatBitsToUint(float(_138 & 32767u) * 3.0518509447574615478515625e-05) | _144) | _144));
    vec4 _151 = _148 / vec4(length(_148));
    vec3 _152 = normalize(varying_RayDirection);
    vec3 _271;
    vec3 _272;
    bool _273;
    do
    {
        float _155 = _151.x;
        _156 = _155 + _155;
        float _157 = _151.y;
        _158 = _157 + _157;
        float _159 = _151.z;
        _160 = _159 + _159;
        _162 = _155 * _158;
        _163 = _155 * _160;
        float _164 = _157 * _158;
        _165 = _157 * _160;
        float _166 = _159 * _160;
        _167 = _151.w;
        float _168 = _167 * _156;
        float _169 = _167 * _158;
        float _170 = _167 * _160;
        _172 = (1.0 - _164) - _166;
        float _176 = 1.0 - (_155 * _156);
        _177 = _176 - _166;
        _181 = _176 - _164;
        _183 = vec3(_162 - _170, _177, _165 + _168);
        mat3 _185 = mat3(vec3(_172, _162 + _170, _163 - _169), _183, vec3(_163 + _169, _165 - _168, _181));
        mat3 _187 = transpose(_185);
        vec3 _188 = _187 * (-varying_Position);
        vec3 _189 = _187 * _152;
        float _190 = _188.x;
        vec2 _192 = vec2(_190, _188.z);
        vec2 _195 = vec2(_189.xz);
        float _196 = dot(_195, _195);
        float _197 = dot(_192, _195);
        float _198 = varying_Radius * varying_Radius;
        float _200 = dot(_192, _192) - _198;
        if ((_197 > 0.0) && (_200 > 0.0))
        {
            _271 = vec3(0.0);
            _272 = vec3(0.0);
            _273 = false;
            break;
        }
        float _244;
        if (_196 > 9.9999999392252902907785028219223e-09)
        {
            float _212 = (_197 * _197) - (_196 * _200);
            if (_212 < 0.0)
            {
                _271 = vec3(0.0);
                _272 = vec3(0.0);
                _273 = false;
                break;
            }
            float _220 = max(-0.0, ((-_197) - sqrt(_212)) / _196);
            vec3 _222 = _188 + (_189 * _220);
            float _223 = _222.y;
            float _224 = -varying_HalfLength;
            bool _225 = _223 < _224;
            if (_225)
            {
            }
            else
            {
                if (!(_223 > varying_HalfLength))
                {
                    _271 = _185 * (vec3(_222.x, 0.0, _222.z) / vec3(varying_Radius));
                    _272 = _152 * _220;
                    _273 = true;
                    break;
                }
            }
            _244 = _225 ? _224 : varying_HalfLength;
        }
        else
        {
            _244 = (_189.y > 0.0) ? (-varying_HalfLength) : varying_HalfLength;
        }
        vec3 _247 = vec3(_190, _188.y - _244, _188.z);
        float _248 = dot(_247, _189);
        float _250 = dot(_247, _247) - _198;
        if ((_248 > 0.0) && (_250 > 0.0))
        {
            _271 = vec3(0.0);
            _272 = vec3(0.0);
            _273 = false;
            break;
        }
        float _257 = (_248 * _248) - _250;
        if (_257 < 0.0)
        {
            _271 = vec3(0.0);
            _272 = vec3(0.0);
            _273 = false;
            break;
        }
        float _264 = max(-0.0, (-_248) - sqrt(_257));
        _271 = _185 * ((_247 + (_189 * _264)) / vec3(varying_Radius));
        _272 = _152 * _264;
        _273 = true;
        break;
    } while(false);
    vec4 _734;
    float _735;
    if (_273)
    {
        float _288 = dot(varying_RayDirection, -PixelConstants.CameraBackwardPS);
        vec2 _292 = vec3(dot(varying_RayDirection, PixelConstants.CameraRightPS), dot(varying_RayDirection, PixelConstants.CameraUpPS), _288).xy / vec2(_288);
        vec2 _295 = _292 + vec2(PixelConstants.PixelSizeAtUnitPlane.x, 0.0);
        vec3 _301 = ((PixelConstants.CameraRightPS * _295.x) + (PixelConstants.CameraUpPS * _295.y)) - PixelConstants.CameraBackwardPS;
        vec2 _304 = _292 + vec2(0.0, PixelConstants.PixelSizeAtUnitPlane.y);
        vec3 _310 = ((PixelConstants.CameraRightPS * _304.x) + (PixelConstants.CameraUpPS * _304.y)) - PixelConstants.CameraBackwardPS;
        float _313 = dot(_271, _272);
        float _333 = -_167;
        float _334 = _333 * _156;
        float _335 = _333 * _158;
        float _336 = _333 * _160;
        mat3 _346 = mat3(vec3(_172, _162 + _336, _163 - _335), vec3(_162 - _336, _177, _165 + _334), vec3(_163 + _335, _165 - _334, _181));
        vec3 _348 = _346 * (_272 - varying_Position);
        vec3 _349 = _346 * _271;
        vec3 _355 = max(abs(_346 * ((_301 * min(10000000.0, _313 / dot(_271, _301))) - _272)), abs(_346 * ((_310 * min(10000000.0, _313 / dot(_271, _310))) - _272))) * 0.5;
        float _356 = _348.x;
        float _357 = _355.x;
        float _358 = _356 - _357;
        float _359 = _356 + _357;
        float _360 = _359 - 0.004999999888241291046142578125;
        float _370 = _358 - 0.004999999888241291046142578125;
        float _390 = 1.0 - clamp((abs(_349.x) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _391 = clamp(((0.00999999977648258209228515625 * (floor(_359 + 0.99500000476837158203125) + clamp(((_360 - floor(_360)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_358 + 0.99500000476837158203125) + clamp(((_370 - floor(_370)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _359 - _358), 0.0, 1.0) * _390;
        float _392 = _348.y;
        float _393 = _355.y;
        float _394 = _392 - _393;
        float _395 = _392 + _393;
        float _396 = _395 - 0.004999999888241291046142578125;
        float _406 = _394 - 0.004999999888241291046142578125;
        float _426 = 1.0 - clamp((abs(_349.y) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _428 = _348.z;
        float _429 = _355.z;
        float _430 = _428 - _429;
        float _431 = _428 + _429;
        float _432 = _431 - 0.004999999888241291046142578125;
        float _442 = _430 - 0.004999999888241291046142578125;
        float _462 = 1.0 - clamp((abs(_349.z) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _466 = _391 + ((clamp(((0.00999999977648258209228515625 * (floor(_395 + 0.99500000476837158203125) + clamp(((_396 - floor(_396)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_394 + 0.99500000476837158203125) + clamp(((_406 - floor(_406)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _395 - _394), 0.0, 1.0) * _426) * (1.0 - _391));
        float _469 = _466 + ((clamp(((0.00999999977648258209228515625 * (floor(_431 + 0.99500000476837158203125) + clamp(((_432 - floor(_432)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_430 + 0.99500000476837158203125) + clamp(((_442 - floor(_442)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _431 - _430), 0.0, 1.0) * _462) * (1.0 - _466));
        float _470 = _358 * 0.20000000298023223876953125;
        float _471 = _359 * 0.20000000298023223876953125;
        float _472 = _471 - 0.0035000001080334186553955078125;
        float _482 = _470 - 0.0035000001080334186553955078125;
        float _497 = clamp(((0.007000000216066837310791015625 * (floor(_471 + 0.9965000152587890625) + clamp(((_472 - floor(_472)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_470 + 0.9965000152587890625) + clamp(((_482 - floor(_482)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _471 - _470), 0.0, 1.0) * _390;
        float _498 = _394 * 0.20000000298023223876953125;
        float _499 = _395 * 0.20000000298023223876953125;
        float _500 = _499 - 0.0035000001080334186553955078125;
        float _510 = _498 - 0.0035000001080334186553955078125;
        float _526 = _430 * 0.20000000298023223876953125;
        float _527 = _431 * 0.20000000298023223876953125;
        float _528 = _527 - 0.0035000001080334186553955078125;
        float _538 = _526 - 0.0035000001080334186553955078125;
        float _556 = _497 + ((clamp(((0.007000000216066837310791015625 * (floor(_499 + 0.9965000152587890625) + clamp(((_500 - floor(_500)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_498 + 0.9965000152587890625) + clamp(((_510 - floor(_510)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _499 - _498), 0.0, 1.0) * _426) * (1.0 - _497));
        float _559 = _556 + ((clamp(((0.007000000216066837310791015625 * (floor(_527 + 0.9965000152587890625) + clamp(((_528 - floor(_528)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_526 + 0.9965000152587890625) + clamp(((_538 - floor(_538)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _527 - _526), 0.0, 1.0) * _462) * (1.0 - _556));
        float _560 = _358 * 0.039999999105930328369140625;
        float _561 = _359 * 0.039999999105930328369140625;
        float _562 = _561 - 0.00200000009499490261077880859375;
        float _572 = _560 - 0.00200000009499490261077880859375;
        float _587 = clamp(((0.0040000001899898052215576171875 * (floor(_561 + 0.99800002574920654296875) + clamp(((_562 - floor(_562)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_560 + 0.99800002574920654296875) + clamp(((_572 - floor(_572)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _561 - _560), 0.0, 1.0) * _390;
        float _588 = _394 * 0.039999999105930328369140625;
        float _589 = _395 * 0.039999999105930328369140625;
        float _590 = _589 - 0.00200000009499490261077880859375;
        float _600 = _588 - 0.00200000009499490261077880859375;
        float _616 = _430 * 0.039999999105930328369140625;
        float _617 = _431 * 0.039999999105930328369140625;
        float _618 = _617 - 0.00200000009499490261077880859375;
        float _628 = _616 - 0.00200000009499490261077880859375;
        float _646 = _587 + ((clamp(((0.0040000001899898052215576171875 * (floor(_589 + 0.99800002574920654296875) + clamp(((_590 - floor(_590)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_588 + 0.99800002574920654296875) + clamp(((_600 - floor(_600)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _589 - _588), 0.0, 1.0) * _426) * (1.0 - _587));
        float _649 = _646 + ((clamp(((0.0040000001899898052215576171875 * (floor(_617 + 0.99800002574920654296875) + clamp(((_618 - floor(_618)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_616 + 0.99800002574920654296875) + clamp(((_628 - floor(_628)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _617 - _616), 0.0, 1.0) * _462) * (1.0 - _646));
        vec4 _670 = vec4(vec3(0.0500000007450580596923828125) * _649, _649) + ((vec4(vec3(0.07500000298023223876953125) * _559, _559) + (vec4(vec3(0.1500000059604644775390625) * _469, _469) * (1.0 - _559))) * (1.0 - _649));
        float _676 = dot(normalize(vec3(0.37000000476837158203125, 0.930000007152557373046875, 0.300000011920928955078125)), _271);
        float _693 = -dot(_152, varying_Position);
        float _694 = dot(_183, _152);
        float _702 = clamp(((-dot(_183, varying_Position)) - (_693 * _694)) / max(1.0000000036274937255387218471014e-15, 1.0 - (_694 * _694)), -varying_HalfLength, varying_HalfLength);
        vec3 _705 = _152 * ((_702 * _694) - _693);
        float _723 = -dot(PixelConstants.CameraBackwardPS, _272);
        float _728 = _723 * PixelConstants.Near;
        _734 = vec4((_670.xyz + (vec3(float(varying_PackedColor & 2047u) * 0.000488519784994423389434814453125, float((varying_PackedColor >> 11u) & 2047u) * 0.000488519784994423389434814453125, float(varying_PackedColor >> 22u) * 0.000977517105638980865478515625) * (1.0 - _670.w))) * ((vec3(0.125) + ((vec3(0.12800000607967376708984375, 0.28299999237060546875, 0.855000019073486328125) * clamp(_271.y, 0.0, 1.0)) * 0.300000011920928955078125)) + (vec3(1.0) * (clamp(_676, 0.0, 1.0) + (0.20000000298023223876953125 * clamp(-_676, 0.0, 1.0))))), clamp((-(length(_705 - (varying_Position + (_183 * _702))) - varying_Radius)) / ((-dot(_705, PixelConstants.CameraBackwardPS)) * max(PixelConstants.PixelSizeAtUnitPlane.x, PixelConstants.PixelSizeAtUnitPlane.y)), 0.0, 1.0));
        _735 = ((PixelConstants.Far * PixelConstants.Near) - _728) / ((_723 * PixelConstants.Far) - _728);
    }
    else
    {
        _734 = vec4(0.0);
        _735 = 0.0;
    }
    out_var_SV_Target0 = _734;
    gl_FragDepth = _735;
}

