#version 450
layout(depth_less) out float gl_FragDepth;

layout(binding = 1, std140) uniform type_PixelConstants
{
    vec3 CameraRightPS;
    float Near;
    vec3 CameraUpPS;
    float Far;
    vec3 CameraBackwardPS;
    float Padding;
    vec2 PixelSizeAtUnitPlane;
} PixelConstants;

layout(location = 0) in vec3 varying_RayDirection;
layout(location = 1) flat in vec3 varying_Position;
layout(location = 2) flat in float varying_Radius;
layout(location = 3) flat in vec3 varying_PackedOrientation;
layout(location = 4) flat in uint varying_PackedColor;
layout(location = 0) out vec4 out_var_SV_Target0;

void main()
{
    vec3 _93 = normalize(varying_RayDirection);
    vec3 _94 = -varying_Position;
    vec3 _100 = _94 + (_93 * max(0.0, (-dot(_94, _93)) - varying_Radius));
    float _101 = dot(_100, _93);
    float _104 = dot(_100, _100) - (varying_Radius * varying_Radius);
    float _106 = (_101 * _101) - _104;
    vec3 _112 = _100 + (_93 * max(0.0, (-_101) - sqrt(_106)));
    vec3 _114 = _112 / vec3(varying_Radius);
    vec3 _115 = _112 + varying_Position;
    vec4 _585;
    float _586;
    if (((_101 <= 0.0) || (_104 <= 0.0)) && (_106 > 0.0))
    {
        float _142 = dot(varying_RayDirection, -PixelConstants.CameraBackwardPS);
        vec2 _146 = vec3(dot(varying_RayDirection, PixelConstants.CameraRightPS), dot(varying_RayDirection, PixelConstants.CameraUpPS), _142).xy / vec2(_142);
        vec2 _149 = _146 + vec2(PixelConstants.PixelSizeAtUnitPlane.x, 0.0);
        vec3 _155 = ((PixelConstants.CameraRightPS * _149.x) + (PixelConstants.CameraUpPS * _149.y)) - PixelConstants.CameraBackwardPS;
        vec2 _158 = _146 + vec2(0.0, PixelConstants.PixelSizeAtUnitPlane.y);
        vec3 _164 = ((PixelConstants.CameraRightPS * _158.x) + (PixelConstants.CameraUpPS * _158.y)) - PixelConstants.CameraBackwardPS;
        float _167 = dot(_114, _115);
        float _187 = -sqrt(clamp(1.0 - dot(varying_PackedOrientation, varying_PackedOrientation), 0.0, 1.0));
        float _188 = varying_PackedOrientation.x + varying_PackedOrientation.x;
        float _189 = varying_PackedOrientation.y + varying_PackedOrientation.y;
        float _190 = varying_PackedOrientation.z + varying_PackedOrientation.z;
        float _192 = varying_PackedOrientation.x * _189;
        float _193 = varying_PackedOrientation.x * _190;
        float _194 = varying_PackedOrientation.y * _189;
        float _195 = varying_PackedOrientation.y * _190;
        float _196 = varying_PackedOrientation.z * _190;
        float _197 = _187 * _188;
        float _198 = _187 * _189;
        float _199 = _187 * _190;
        float _205 = 1.0 - (varying_PackedOrientation.x * _188);
        mat3 _214 = mat3(vec3((1.0 - _194) - _196, _192 + _199, _193 - _198), vec3(_192 - _199, _205 - _196, _195 + _197), vec3(_193 + _198, _195 - _197, _205 - _194));
        vec3 _216 = _214 * (_115 - varying_Position);
        vec3 _217 = _214 * _114;
        vec3 _223 = max(abs(_214 * ((_155 * min(10000000.0, _167 / dot(_114, _155))) - _115)), abs(_214 * ((_164 * min(10000000.0, _167 / dot(_114, _164))) - _115))) * 0.5;
        float _224 = _216.x;
        float _225 = _223.x;
        float _226 = _224 - _225;
        float _227 = _224 + _225;
        float _228 = _227 - 0.004999999888241291046142578125;
        float _238 = _226 - 0.004999999888241291046142578125;
        float _258 = 1.0 - clamp((abs(_217.x) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _259 = clamp(((0.00999999977648258209228515625 * (floor(_227 + 0.99500000476837158203125) + clamp(((_228 - floor(_228)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_226 + 0.99500000476837158203125) + clamp(((_238 - floor(_238)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _227 - _226), 0.0, 1.0) * _258;
        float _260 = _216.y;
        float _261 = _223.y;
        float _262 = _260 - _261;
        float _263 = _260 + _261;
        float _264 = _263 - 0.004999999888241291046142578125;
        float _274 = _262 - 0.004999999888241291046142578125;
        float _294 = 1.0 - clamp((abs(_217.y) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _296 = _216.z;
        float _297 = _223.z;
        float _298 = _296 - _297;
        float _299 = _296 + _297;
        float _300 = _299 - 0.004999999888241291046142578125;
        float _310 = _298 - 0.004999999888241291046142578125;
        float _330 = 1.0 - clamp((abs(_217.z) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _334 = _259 + ((clamp(((0.00999999977648258209228515625 * (floor(_263 + 0.99500000476837158203125) + clamp(((_264 - floor(_264)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_262 + 0.99500000476837158203125) + clamp(((_274 - floor(_274)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _263 - _262), 0.0, 1.0) * _294) * (1.0 - _259));
        float _337 = _334 + ((clamp(((0.00999999977648258209228515625 * (floor(_299 + 0.99500000476837158203125) + clamp(((_300 - floor(_300)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_298 + 0.99500000476837158203125) + clamp(((_310 - floor(_310)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _299 - _298), 0.0, 1.0) * _330) * (1.0 - _334));
        float _338 = _226 * 0.20000000298023223876953125;
        float _339 = _227 * 0.20000000298023223876953125;
        float _340 = _339 - 0.0035000001080334186553955078125;
        float _350 = _338 - 0.0035000001080334186553955078125;
        float _365 = clamp(((0.007000000216066837310791015625 * (floor(_339 + 0.9965000152587890625) + clamp(((_340 - floor(_340)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_338 + 0.9965000152587890625) + clamp(((_350 - floor(_350)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _339 - _338), 0.0, 1.0) * _258;
        float _366 = _262 * 0.20000000298023223876953125;
        float _367 = _263 * 0.20000000298023223876953125;
        float _368 = _367 - 0.0035000001080334186553955078125;
        float _378 = _366 - 0.0035000001080334186553955078125;
        float _394 = _298 * 0.20000000298023223876953125;
        float _395 = _299 * 0.20000000298023223876953125;
        float _396 = _395 - 0.0035000001080334186553955078125;
        float _406 = _394 - 0.0035000001080334186553955078125;
        float _424 = _365 + ((clamp(((0.007000000216066837310791015625 * (floor(_367 + 0.9965000152587890625) + clamp(((_368 - floor(_368)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_366 + 0.9965000152587890625) + clamp(((_378 - floor(_378)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _367 - _366), 0.0, 1.0) * _294) * (1.0 - _365));
        float _427 = _424 + ((clamp(((0.007000000216066837310791015625 * (floor(_395 + 0.9965000152587890625) + clamp(((_396 - floor(_396)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_394 + 0.9965000152587890625) + clamp(((_406 - floor(_406)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _395 - _394), 0.0, 1.0) * _330) * (1.0 - _424));
        float _428 = _226 * 0.039999999105930328369140625;
        float _429 = _227 * 0.039999999105930328369140625;
        float _430 = _429 - 0.00200000009499490261077880859375;
        float _440 = _428 - 0.00200000009499490261077880859375;
        float _455 = clamp(((0.0040000001899898052215576171875 * (floor(_429 + 0.99800002574920654296875) + clamp(((_430 - floor(_430)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_428 + 0.99800002574920654296875) + clamp(((_440 - floor(_440)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _429 - _428), 0.0, 1.0) * _258;
        float _456 = _262 * 0.039999999105930328369140625;
        float _457 = _263 * 0.039999999105930328369140625;
        float _458 = _457 - 0.00200000009499490261077880859375;
        float _468 = _456 - 0.00200000009499490261077880859375;
        float _484 = _298 * 0.039999999105930328369140625;
        float _485 = _299 * 0.039999999105930328369140625;
        float _486 = _485 - 0.00200000009499490261077880859375;
        float _496 = _484 - 0.00200000009499490261077880859375;
        float _514 = _455 + ((clamp(((0.0040000001899898052215576171875 * (floor(_457 + 0.99800002574920654296875) + clamp(((_458 - floor(_458)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_456 + 0.99800002574920654296875) + clamp(((_468 - floor(_468)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _457 - _456), 0.0, 1.0) * _294) * (1.0 - _455));
        float _517 = _514 + ((clamp(((0.0040000001899898052215576171875 * (floor(_485 + 0.99800002574920654296875) + clamp(((_486 - floor(_486)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_484 + 0.99800002574920654296875) + clamp(((_496 - floor(_496)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _485 - _484), 0.0, 1.0) * _330) * (1.0 - _514));
        vec4 _538 = vec4(vec3(0.0500000007450580596923828125) * _517, _517) + ((vec4(vec3(0.07500000298023223876953125) * _427, _427) + (vec4(vec3(0.1500000059604644775390625) * _337, _337) * (1.0 - _427))) * (1.0 - _517));
        float _544 = dot(normalize(vec3(0.37000000476837158203125, 0.930000007152557373046875, 0.300000011920928955078125)), _114);
        vec3 _559 = _93 * dot(_93, varying_Position);
        float _574 = -dot(PixelConstants.CameraBackwardPS, _115);
        float _579 = _574 * PixelConstants.Near;
        _585 = vec4((_538.xyz + (vec3(float(varying_PackedColor & 2047u) * 0.000488519784994423389434814453125, float((varying_PackedColor >> 11u) & 2047u) * 0.000488519784994423389434814453125, float(varying_PackedColor >> 22u) * 0.000977517105638980865478515625) * (1.0 - _538.w))) * ((vec3(0.125) + ((vec3(0.12800000607967376708984375, 0.28299999237060546875, 0.855000019073486328125) * clamp(_114.y, 0.0, 1.0)) * 0.300000011920928955078125)) + (vec3(1.0) * (clamp(_544, 0.0, 1.0) + (0.20000000298023223876953125 * clamp(-_544, 0.0, 1.0))))), clamp((-(distance(_559, varying_Position) - varying_Radius)) / ((-dot(_559, PixelConstants.CameraBackwardPS)) * max(PixelConstants.PixelSizeAtUnitPlane.x, PixelConstants.PixelSizeAtUnitPlane.y)), 0.0, 1.0));
        _586 = ((PixelConstants.Far * PixelConstants.Near) - _579) / ((_574 * PixelConstants.Far) - _579);
    }
    else
    {
        _585 = vec4(0.0);
        _586 = 0.0;
    }
    out_var_SV_Target0 = _585;
    gl_FragDepth = _586;
}

