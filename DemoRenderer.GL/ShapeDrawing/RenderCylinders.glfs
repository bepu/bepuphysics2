#version 450
layout(depth_less) out float gl_FragDepth;

layout(binding = 1, std140) uniform type_PixelConstants
{
    vec3 CameraRightPS;
    float Near;
    vec3 CameraUpPS;
    float Far;
    vec3 CameraBackwardPS;
    float Padding;
    vec2 PixelSizeAtUnitPlane;
} PixelConstants;

layout(location = 0) in vec3 varying_RayDirection;
layout(location = 1) flat in vec3 varying_Position;
layout(location = 2) flat in float varying_Radius;
layout(location = 3) flat in uvec2 varying_PackedOrientation;
layout(location = 4) flat in float varying_HalfLength;
layout(location = 5) flat in uint varying_PackedColor;
layout(location = 0) out vec4 out_var_SV_Target0;

void main()
{
    uint _123 = (varying_PackedOrientation.x & 32768u) << 16u;
    uint _127 = varying_PackedOrientation.x >> 16u;
    uint _133 = (_127 & 32768u) << 16u;
    uint _143 = (varying_PackedOrientation.y & 32768u) << 16u;
    uint _147 = varying_PackedOrientation.y >> 16u;
    uint _153 = (_147 & 32768u) << 16u;
    vec4 _157 = vec4(uintBitsToFloat((floatBitsToUint(float(varying_PackedOrientation.x & 32767u) * 3.0518509447574615478515625e-05) | _123) | _123), uintBitsToFloat((floatBitsToUint(float(_127 & 32767u) * 3.0518509447574615478515625e-05) | _133) | _133), uintBitsToFloat((floatBitsToUint(float(varying_PackedOrientation.y & 32767u) * 3.0518509447574615478515625e-05) | _143) | _143), uintBitsToFloat((floatBitsToUint(float(_147 & 32767u) * 3.0518509447574615478515625e-05) | _153) | _153));
    vec4 _160 = _157 / vec4(length(_157));
    vec3 _161 = dFdx(varying_RayDirection);
    vec3 _162 = dFdy(varying_RayDirection);
    vec3 _109[4];
    _109[0] = normalize((varying_RayDirection + (_161 * (-0.125))) + (_162 * (-0.375)));
    _109[1] = normalize((varying_RayDirection + (_161 * 0.375)) + (_162 * (-0.125)));
    _109[2] = normalize((varying_RayDirection + (_161 * (-0.375))) + (_162 * 0.125));
    _109[3] = normalize((varying_RayDirection + (_161 * 0.125)) + (_162 * 0.375));
    vec3 _188;
    vec3 _191;
    float _193;
    _188 = vec3(0.0);
    _191 = vec3(0.0);
    _193 = 0.0;
    vec3 _189;
    vec3 _192;
    float _194;
    for (int _195 = 0; _195 < 4; _188 = _189, _191 = _192, _193 = _194, _195++)
    {
        vec3 _331;
        vec3 _332;
        bool _333;
        do
        {
            float _204 = _160.x;
            float _205 = _204 + _204;
            float _206 = _160.y;
            float _207 = _206 + _206;
            float _208 = _160.z;
            float _209 = _208 + _208;
            float _211 = _204 * _207;
            float _212 = _204 * _209;
            float _213 = _206 * _207;
            float _214 = _206 * _209;
            float _215 = _208 * _209;
            float _216 = _160.w;
            float _217 = _216 * _205;
            float _218 = _216 * _207;
            float _219 = _216 * _209;
            float _225 = 1.0 - (_204 * _205);
            vec3 _232 = vec3(_211 - _219, _225 - _215, _214 + _217);
            mat3 _234 = mat3(vec3((1.0 - _213) - _215, _211 + _219, _212 - _218), _232, vec3(_212 + _218, _214 - _217, _225 - _213));
            mat3 _236 = transpose(_234);
            vec3 _237 = _236 * (-varying_Position);
            vec3 _238 = _236 * _109[_195];
            vec2 _241 = vec2(_237.xz);
            vec2 _244 = vec2(_238.xz);
            float _245 = dot(_244, _244);
            float _246 = dot(_241, _244);
            float _247 = varying_Radius * varying_Radius;
            float _249 = dot(_241, _241) - _247;
            if ((_246 > 0.0) && (_249 > 0.0))
            {
                _331 = vec3(0.0);
                _332 = vec3(0.0);
                _333 = false;
                break;
            }
            vec3 _301;
            float _302;
            if (_245 > 9.9999999392252902907785028219223e-09)
            {
                float _261 = (_246 * _246) - (_245 * _249);
                if (_261 < 0.0)
                {
                    _331 = vec3(0.0);
                    _332 = vec3(0.0);
                    _333 = false;
                    break;
                }
                float _269 = max(((-_246) - sqrt(_261)) / _245, 0.0);
                float _273 = _237.y + (_238.y * _269);
                vec3 _274 = vec3(0.0);
                _274.y = _273;
                float _275 = -varying_HalfLength;
                bool _276 = _273 < _275;
                if (_276)
                {
                }
                else
                {
                    if (!(_273 > varying_HalfLength))
                    {
                        vec2 _286 = _237.xz + (_238.xz * _269);
                        vec2 _290 = _286.xy / vec2(varying_Radius);
                        vec3 _292 = vec3(_290.x, vec3(0.0).y, _290.y);
                        _292.y = 0.0;
                        _331 = _234 * _292;
                        _332 = (_234 * vec3(_286.x, _274.y, _286.y)) + varying_Position;
                        _333 = true;
                        break;
                    }
                }
                _301 = _274;
                _302 = _276 ? _275 : varying_HalfLength;
            }
            else
            {
                _301 = vec3(0.0);
                _302 = (_238.y > 0.0) ? (-varying_HalfLength) : varying_HalfLength;
            }
            float _303 = _237.y;
            float _304 = _238.y;
            if ((_303 * _304) >= 0.0)
            {
                _331 = vec3(0.0);
                _332 = _301;
                _333 = false;
                break;
            }
            vec2 _314 = _237.xz + (_238.xz * ((_302 - _303) / _304));
            vec3 _315 = vec3(_314.x, _301.y, _314.y);
            float _316 = _314.x;
            float _318 = _314.y;
            if (((_316 * _316) + (_318 * _318)) > _247)
            {
                _331 = vec3(0.0);
                _332 = _315;
                _333 = false;
                break;
            }
            vec3 _324 = _315;
            _324.y = _302;
            _331 = mix(-_232, _232, bvec3(_304 < 0.0));
            _332 = (_234 * _324) + varying_Position;
            _333 = true;
            break;
        } while(false);
        if (_333)
        {
            _189 = _188 + _331;
            _192 = _191 + _332;
            _194 = _193 + 1.0;
        }
        else
        {
            _189 = _188;
            _192 = _191;
            _194 = _193;
        }
    }
    vec4 _794;
    float _795;
    if (_193 > 0.0)
    {
        vec3 _344 = _191 * (1.0 / _193);
        vec3 _345 = normalize(_188);
        float _357 = dot(varying_RayDirection, -PixelConstants.CameraBackwardPS);
        vec2 _361 = vec3(dot(varying_RayDirection, PixelConstants.CameraRightPS), dot(varying_RayDirection, PixelConstants.CameraUpPS), _357).xy / vec2(_357);
        vec2 _364 = _361 + vec2(PixelConstants.PixelSizeAtUnitPlane.x, 0.0);
        vec3 _370 = ((PixelConstants.CameraRightPS * _364.x) + (PixelConstants.CameraUpPS * _364.y)) - PixelConstants.CameraBackwardPS;
        vec2 _373 = _361 + vec2(0.0, PixelConstants.PixelSizeAtUnitPlane.y);
        vec3 _379 = ((PixelConstants.CameraRightPS * _373.x) + (PixelConstants.CameraUpPS * _373.y)) - PixelConstants.CameraBackwardPS;
        float _382 = dot(_345, _344);
        float _403 = -_160.w;
        float _404 = _160.x;
        float _405 = _160.y;
        float _406 = _160.z;
        float _407 = _404 + _404;
        float _408 = _405 + _405;
        float _409 = _406 + _406;
        float _411 = _404 * _408;
        float _412 = _404 * _409;
        float _413 = _405 * _408;
        float _414 = _405 * _409;
        float _415 = _406 * _409;
        float _416 = _403 * _407;
        float _417 = _403 * _408;
        float _418 = _403 * _409;
        float _424 = 1.0 - (_404 * _407);
        mat3 _433 = mat3(vec3((1.0 - _413) - _415, _411 + _418, _412 - _417), vec3(_411 - _418, _424 - _415, _414 + _416), vec3(_412 + _417, _414 - _416, _424 - _413));
        vec3 _435 = _433 * (_344 - varying_Position);
        vec3 _436 = _433 * _345;
        vec3 _442 = max(abs(_433 * ((_370 * min(10000000.0, _382 / dot(_345, _370))) - _344)), abs(_433 * ((_379 * min(10000000.0, _382 / dot(_345, _379))) - _344))) * 0.5;
        float _443 = _435.x;
        float _444 = _442.x;
        float _445 = _443 - _444;
        float _446 = _443 + _444;
        float _447 = _446 - 0.004999999888241291046142578125;
        float _457 = _445 - 0.004999999888241291046142578125;
        float _477 = 1.0 - clamp((abs(_436.x) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _478 = clamp(((0.00999999977648258209228515625 * (floor(_446 + 0.99500000476837158203125) + clamp(((_447 - floor(_447)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_445 + 0.99500000476837158203125) + clamp(((_457 - floor(_457)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _446 - _445), 0.0, 1.0) * _477;
        float _479 = _435.y;
        float _480 = _442.y;
        float _481 = _479 - _480;
        float _482 = _479 + _480;
        float _483 = _482 - 0.004999999888241291046142578125;
        float _493 = _481 - 0.004999999888241291046142578125;
        float _513 = 1.0 - clamp((abs(_436.y) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _515 = _435.z;
        float _516 = _442.z;
        float _517 = _515 - _516;
        float _518 = _515 + _516;
        float _519 = _518 - 0.004999999888241291046142578125;
        float _529 = _517 - 0.004999999888241291046142578125;
        float _549 = 1.0 - clamp((abs(_436.z) - 0.7070000171661376953125) * 333.337615966796875, 0.0, 1.0);
        float _553 = _478 + ((clamp(((0.00999999977648258209228515625 * (floor(_482 + 0.99500000476837158203125) + clamp(((_483 - floor(_483)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_481 + 0.99500000476837158203125) + clamp(((_493 - floor(_493)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _482 - _481), 0.0, 1.0) * _513) * (1.0 - _478));
        float _556 = _553 + ((clamp(((0.00999999977648258209228515625 * (floor(_518 + 0.99500000476837158203125) + clamp(((_519 - floor(_519)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0))) - (0.00999999977648258209228515625 * (floor(_517 + 0.99500000476837158203125) + clamp(((_529 - floor(_529)) - 0.9900000095367431640625) * 100.0, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _518 - _517), 0.0, 1.0) * _549) * (1.0 - _553));
        float _557 = _445 * 0.20000000298023223876953125;
        float _558 = _446 * 0.20000000298023223876953125;
        float _559 = _558 - 0.0035000001080334186553955078125;
        float _569 = _557 - 0.0035000001080334186553955078125;
        float _584 = clamp(((0.007000000216066837310791015625 * (floor(_558 + 0.9965000152587890625) + clamp(((_559 - floor(_559)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_557 + 0.9965000152587890625) + clamp(((_569 - floor(_569)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _558 - _557), 0.0, 1.0) * _477;
        float _585 = _481 * 0.20000000298023223876953125;
        float _586 = _482 * 0.20000000298023223876953125;
        float _587 = _586 - 0.0035000001080334186553955078125;
        float _597 = _585 - 0.0035000001080334186553955078125;
        float _613 = _517 * 0.20000000298023223876953125;
        float _614 = _518 * 0.20000000298023223876953125;
        float _615 = _614 - 0.0035000001080334186553955078125;
        float _625 = _613 - 0.0035000001080334186553955078125;
        float _643 = _584 + ((clamp(((0.007000000216066837310791015625 * (floor(_586 + 0.9965000152587890625) + clamp(((_587 - floor(_587)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_585 + 0.9965000152587890625) + clamp(((_597 - floor(_597)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _586 - _585), 0.0, 1.0) * _513) * (1.0 - _584));
        float _646 = _643 + ((clamp(((0.007000000216066837310791015625 * (floor(_614 + 0.9965000152587890625) + clamp(((_615 - floor(_615)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0))) - (0.007000000216066837310791015625 * (floor(_613 + 0.9965000152587890625) + clamp(((_625 - floor(_625)) - 0.992999970912933349609375) * 142.8571319580078125, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _614 - _613), 0.0, 1.0) * _549) * (1.0 - _643));
        float _647 = _445 * 0.039999999105930328369140625;
        float _648 = _446 * 0.039999999105930328369140625;
        float _649 = _648 - 0.00200000009499490261077880859375;
        float _659 = _647 - 0.00200000009499490261077880859375;
        float _674 = clamp(((0.0040000001899898052215576171875 * (floor(_648 + 0.99800002574920654296875) + clamp(((_649 - floor(_649)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_647 + 0.99800002574920654296875) + clamp(((_659 - floor(_659)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _648 - _647), 0.0, 1.0) * _477;
        float _675 = _481 * 0.039999999105930328369140625;
        float _676 = _482 * 0.039999999105930328369140625;
        float _677 = _676 - 0.00200000009499490261077880859375;
        float _687 = _675 - 0.00200000009499490261077880859375;
        float _703 = _517 * 0.039999999105930328369140625;
        float _704 = _518 * 0.039999999105930328369140625;
        float _705 = _704 - 0.00200000009499490261077880859375;
        float _715 = _703 - 0.00200000009499490261077880859375;
        float _733 = _674 + ((clamp(((0.0040000001899898052215576171875 * (floor(_676 + 0.99800002574920654296875) + clamp(((_677 - floor(_677)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_675 + 0.99800002574920654296875) + clamp(((_687 - floor(_687)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _676 - _675), 0.0, 1.0) * _513) * (1.0 - _674));
        float _736 = _733 + ((clamp(((0.0040000001899898052215576171875 * (floor(_704 + 0.99800002574920654296875) + clamp(((_705 - floor(_705)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0))) - (0.0040000001899898052215576171875 * (floor(_703 + 0.99800002574920654296875) + clamp(((_715 - floor(_715)) - 0.995999991893768310546875) * 249.9999847412109375, 0.0, 1.0)))) / max(1.0000000116860974230803549289703e-07, _704 - _703), 0.0, 1.0) * _549) * (1.0 - _733));
        vec4 _757 = vec4(vec3(0.0500000007450580596923828125) * _736, _736) + ((vec4(vec3(0.07500000298023223876953125) * _646, _646) + (vec4(vec3(0.1500000059604644775390625) * _556, _556) * (1.0 - _646))) * (1.0 - _736));
        float _763 = dot(normalize(vec3(0.37000000476837158203125, 0.930000007152557373046875, 0.300000011920928955078125)), _345);
        float _783 = -dot(PixelConstants.CameraBackwardPS, _344);
        float _788 = _783 * PixelConstants.Near;
        _794 = vec4((_757.xyz + (vec3(float(varying_PackedColor & 2047u) * 0.000488519784994423389434814453125, float((varying_PackedColor >> 11u) & 2047u) * 0.000488519784994423389434814453125, float(varying_PackedColor >> 22u) * 0.000977517105638980865478515625) * (1.0 - _757.w))) * ((vec3(0.125) + ((vec3(0.12800000607967376708984375, 0.28299999237060546875, 0.855000019073486328125) * clamp(_345.y, 0.0, 1.0)) * 0.300000011920928955078125)) + (vec3(1.0) * (clamp(_763, 0.0, 1.0) + (0.20000000298023223876953125 * clamp(-_763, 0.0, 1.0))))), _193 * 0.25);
        _795 = ((PixelConstants.Far * PixelConstants.Near) - _788) / ((_783 * PixelConstants.Far) - _788);
    }
    else
    {
        _794 = vec4(0.0);
        _795 = 0.0;
    }
    out_var_SV_Target0 = _794;
    gl_FragDepth = _795;
}

