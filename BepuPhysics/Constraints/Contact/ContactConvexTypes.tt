<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using BepuPhysics.CollisionDetection;
using System;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using BepuUtilities;
using BepuUtilities.Memory;
using static BepuUtilities.GatherScatter;
namespace BepuPhysics.Constraints.Contact
{  
<#for (int contactCount = 1; contactCount <= 4; ++contactCount)    {#>
    public struct Contact<#= contactCount #>AccumulatedImpulses : IConvexContactAccumulatedImpulses<Contact<#= contactCount #>AccumulatedImpulses>
    {
        public Vector2Wide Tangent;
<#for (int i = 0; i < contactCount ; ++i) {#>
        public Vector<float> Penetration<#=i#>;
<#}#>
        public Vector<float> Twist;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Vector2Wide GetTangentFriction(ref Contact<#= contactCount #>AccumulatedImpulses impulses)
        {
            return ref impulses.Tangent;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Vector<float> GetTwistFriction(ref Contact<#= contactCount #>AccumulatedImpulses impulses)
        {
            return ref impulses.Twist;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Vector<float> GetPenetrationImpulseForContact(ref Contact<#= contactCount #>AccumulatedImpulses impulses, int index)
        {
            Debug.Assert(index >= 0 && index < <#=contactCount#>);
            return ref Unsafe.Add(ref impulses.Penetration0, index);
        }
        public static int ContactCount => <#=contactCount#>;
    }

<#}#>
    internal static class FrictionHelpers
    {
<#for (int contactCount = 2; contactCount <= 4; ++contactCount)    {#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ComputeFrictionCenter(
            <#for (int i = 0; i < contactCount; ++i) {#>in Vector3Wide offsetA<#=i#>, <#}#>

            <#for (int i = 0; i < contactCount; ++i) {#>in Vector<float> depth<#=i#>,<#}#> out Vector3Wide center)
        {
            //This can sometimes cause a weird center of friction. That's a bit strange, but the alternative is often stranger:
            //Without this, if one contact is active and the other is speculative, friction will use the manifold center as halfway between the two points. If something is holding 
            //the inactive contact side up and swinging it around, the existence of speculative contacts would make friction work against the free swinging.
<#for (int i = 0; i < contactCount; ++i) {#>
            var weight<#=i#> = Vector.ConditionalSelect(Vector.LessThan(depth<#=i#>, Vector<float>.Zero), Vector<float>.Zero, Vector<float>.One);
<#}#>
            var weightSum = <#for (int i = 0; i < contactCount; ++i) {#>weight<#=i#><#if (i < contactCount - 1) {#> + <#}#><#}#>;
            var useFallback = Vector.Equals(weightSum, Vector<float>.Zero);
            weightSum = Vector.ConditionalSelect(useFallback, new Vector<float>(<#=contactCount#>), weightSum);
            var inverseWeightSum = Vector<float>.One / weightSum;
<#for (int i = 0; i < contactCount; ++i) {#>
            weight<#=i#> = Vector.ConditionalSelect(useFallback, inverseWeightSum, weight<#=i#> * inverseWeightSum);
<#}#>
<#for (int i = 0; i < contactCount; ++i) {#>
            Vector3Wide.Scale(offsetA<#=i#>, weight<#=i#>, out var a<#=i#>Contribution);
<#}#>
<#if (contactCount == 2) {#>
            Vector3Wide.Add(a0Contribution, a1Contribution, out center);
<#}#>
<#if (contactCount == 3) {#>
            Vector3Wide.Add(a0Contribution, a1Contribution, out var a0a1);
            Vector3Wide.Add(a0a1, a2Contribution, out center);
<#}#>
<#if (contactCount == 4) {#>
            Vector3Wide.Add(a0Contribution, a1Contribution, out var a0a1);
            Vector3Wide.Add(a2Contribution, a3Contribution, out var a2a3);
            Vector3Wide.Add(a0a1, a2a3, out center);
<#}#>
        }

<#}#>
    }
<#
for (int bodyCount = 1; bodyCount <= 2; ++bodyCount)
{
    var suffix = bodyCount == 1 ? "OneBody" : "";
    var bodyReferencesType = bodyCount == 1 ? "Vector<int>" : "TwoBodyReferences";
    for (int contactCount = 1; contactCount <= 4; ++contactCount)
    {
#>
    public struct Contact<#= contactCount #><#=suffix#> : IConvex<#Write(bodyCount == 2 ? "TwoBody" : "OneBody");#>ContactConstraintDescription<Contact<#= contactCount #><#=suffix#>>
    {
<#
for (int i = 0; i < contactCount; ++i)
{#>
        public ConstraintContactData Contact<#=i#>;
<#}#>
<#if (bodyCount == 2) {#>
        public Vector3 OffsetB;
<#}#>
        public Vector3 Normal;
        public float FrictionCoefficient;
        public SpringSettings SpringSettings;
        public float MaximumRecoveryVelocity;

        public readonly void ApplyDescription(ref TypeBatch batch, int bundleIndex, int innerIndex)
        {
            Debug.Assert(batch.TypeId == ConstraintTypeId, "The type batch passed to the description must match the description's expected type.");
            ref var target = ref GetOffsetInstance(ref Buffer<Contact<#=contactCount#><#=suffix#>PrestepData>.Get(ref batch.PrestepData, bundleIndex), innerIndex);
<# for (int i = 0; i < contactCount; ++i) {#>
            Vector3Wide.WriteFirst(Contact<#=i#>.OffsetA, ref target.Contact<#=i#>.OffsetA);
            GetFirst(ref target.Contact<#=i#>.Depth) = Contact<#=i#>.PenetrationDepth;
<#}#>            
<#if (bodyCount == 2) {#>
            Vector3Wide.WriteFirst(OffsetB, ref target.OffsetB);
<#}#>
            Vector3Wide.WriteFirst(Normal, ref target.Normal);
            GetFirst(ref target.MaterialProperties.FrictionCoefficient) = FrictionCoefficient;
            SpringSettingsWide.WriteFirst(SpringSettings, ref target.MaterialProperties.SpringSettings);
            GetFirst(ref target.MaterialProperties.MaximumRecoveryVelocity) = MaximumRecoveryVelocity;
        }

        public static void BuildDescription(ref TypeBatch batch, int bundleIndex, int innerIndex, out Contact<#= contactCount #><#=suffix#> description)
        {    
            Debug.Assert(batch.TypeId == ConstraintTypeId, "The type batch passed to the description must match the description's expected type.");
            ref var source = ref GetOffsetInstance(ref Buffer<Contact<#=contactCount#><#=suffix#>PrestepData>.Get(ref batch.PrestepData, bundleIndex), innerIndex);
<#for (int i = 0; i < contactCount; ++i) {#>
            Vector3Wide.ReadFirst(source.Contact<#=i#>.OffsetA, out description.Contact<#=i#>.OffsetA);
            description.Contact<#=i#>.PenetrationDepth = GetFirst(ref source.Contact<#=i#>.Depth);
<#}#>
<#if (bodyCount == 2) {#>            
            Vector3Wide.ReadFirst(source.OffsetB, out description.OffsetB);
<#}#>
            Vector3Wide.ReadFirst(source.Normal, out description.Normal);
            description.FrictionCoefficient = GetFirst(ref source.MaterialProperties.FrictionCoefficient);
            SpringSettingsWide.ReadFirst(source.MaterialProperties.SpringSettings, out description.SpringSettings);
            description.MaximumRecoveryVelocity = GetFirst(ref source.MaterialProperties.MaximumRecoveryVelocity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyManifoldWideProperties(<#if (bodyCount == 2) {#>ref Vector3 offsetB, <#}#>ref Vector3 normal, ref PairMaterialProperties material)
        {
<#if (bodyCount == 2) {#>
            OffsetB = offsetB;
<#}#>
            FrictionCoefficient = material.FrictionCoefficient;
            Normal = normal;
            SpringSettings = material.SpringSettings;
            MaximumRecoveryVelocity = material.MaximumRecoveryVelocity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref ConstraintContactData GetFirstContact(ref Contact<#= contactCount #><#=suffix#> description)
        {
            return ref description.Contact0;
        }
        
        public static int ConstraintTypeId
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => Contact<#= contactCount #><#=suffix#>TypeProcessor.BatchTypeId;
        }
        
        public static Type TypeProcessorType => typeof(Contact<#= contactCount #><#=suffix#>TypeProcessor);
        public static TypeProcessor CreateTypeProcessor() => new Contact<#= contactCount #><#=suffix#>TypeProcessor();

    }

    public struct Contact<#= contactCount #><#=suffix#>PrestepData : I<#= bodyCount == 2 ? "TwoBody" : ""#>ConvexContactPrestep<Contact<#= contactCount #><#=suffix#>PrestepData>
    {
        //NOTE: Prestep data memory layout is relied upon by the constraint description for marginally more efficient setting and getting.
        //If you modify this layout, be sure to update the associated ContactManifold4Constraint.
        //Note that this layout is defined by the execution order in the prestep. The function accesses it sequentially to ensure the prefetcher can do its job.
<#for (int i = 0; i < contactCount; ++i) {#>
        public ConvexContactWide Contact<#=i#>;
<#}#>
<#if (bodyCount == 2) {#>
        public Vector3Wide OffsetB;
<#}#>
        //In a convex manifold, all contacts share the same normal and tangents.
        public Vector3Wide Normal;
        public MaterialPropertiesWide MaterialProperties;
		
        public static int BodyCount => <#=bodyCount#>;
        public static int ContactCount => <#=contactCount#>;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Vector3Wide GetNormal(ref Contact<#= contactCount #><#=suffix#>PrestepData prestep)
        {
            return ref prestep.Normal;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref ConvexContactWide GetContact(ref Contact<#= contactCount #><#=suffix#>PrestepData prestep, int index)
        {
            return ref Unsafe.Add(ref prestep.Contact0, index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref MaterialPropertiesWide GetMaterialProperties(ref Contact<#= contactCount #><#=suffix#>PrestepData prestep)
        {
            return ref prestep.MaterialProperties;
        }

<#if (bodyCount == 2){#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Vector3Wide GetOffsetB(ref Contact<#= contactCount #><#=suffix#>PrestepData prestep)
        {
            return ref prestep.OffsetB;
        }
<#}#>
    }


    public struct Contact<#=contactCount#><#=suffix#>Functions : I<#=bodyCount == 1 ? "OneBody" : "TwoBody"#>ConstraintFunctions<Contact<#=contactCount#><#=suffix#>PrestepData, Contact<#=contactCount#>AccumulatedImpulses>
    {       
        public static bool RequiresIncrementalSubstepUpdates => true;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IncrementallyUpdateForSubstep(in Vector<float> dt, in BodyVelocityWide velocityA,<#if(bodyCount == 2) {#> in BodyVelocityWide velocityB,<#}#> ref Contact<#=contactCount#><#=suffix#>PrestepData prestep)
        {
<#for (int i = 0; i < contactCount; ++i) {#>
            PenetrationLimit<#=suffix#>.UpdatePenetrationDepth(dt, prestep.Contact<#=i#>.OffsetA, <#if(bodyCount == 2) {#>prestep.OffsetB, <#}#>prestep.Normal, velocityA, <#if (bodyCount == 2) {#>velocityB, <#}#>ref prestep.Contact<#=i#>.Depth);
<#}#>
        }
               
        [MethodImpl(MethodImplOptions.AggressiveInlining)] 
        public static void WarmStart(in Vector3Wide positionA, in QuaternionWide orientationA, in BodyInertiaWide inertiaA, <#if(bodyCount == 2) {#>in Vector3Wide positionB, in QuaternionWide orientationB, in BodyInertiaWide inertiaB, <#}#>ref Contact<#=contactCount#><#=suffix#>PrestepData prestep, ref Contact<#=contactCount#>AccumulatedImpulses accumulatedImpulses, ref BodyVelocityWide wsvA<#if(bodyCount == 2) {#>, ref BodyVelocityWide wsvB<#}#>)
        {
            Helpers.BuildOrthonormalBasis(prestep.Normal, out var x, out var z);
<#if (contactCount > 1) {#>
            FrictionHelpers.ComputeFrictionCenter(<#for (int i = 0; i < contactCount; ++i) {#>prestep.Contact<#=i#>.OffsetA, <#}#><#for (int i = 0; i < contactCount; ++i) {#>prestep.Contact<#=i#>.Depth, <#}#>out var offsetToManifoldCenterA);
<#if (bodyCount == 2) {#>
            Vector3Wide.Subtract(offsetToManifoldCenterA, prestep.OffsetB, out var offsetToManifoldCenterB);
<#}#>
<#} else if(bodyCount == 2) {#>
            Vector3Wide.Subtract(prestep.Contact0.OffsetA, prestep.OffsetB, out var offsetToManifoldCenterB);
<#}#>
            TangentFriction<#=suffix#>.WarmStart(x, z, <#if(contactCount > 1) {#>offsetToManifoldCenterA<#} else {#>prestep.Contact0.OffsetA<#}#>, <#if(bodyCount == 2) {#>offsetToManifoldCenterB, <#}#>inertiaA, <#if(bodyCount == 2) {#>inertiaB, <#}#>accumulatedImpulses.Tangent, ref wsvA<#if(bodyCount == 2) {#>, ref wsvB<#}#>);
<#for (int i = 0; i < contactCount; ++i) {#>
            PenetrationLimit<#=suffix#>.WarmStart(inertiaA, <#if(bodyCount == 2) {#>inertiaB, <#}#>prestep.Normal, prestep.Contact<#=i#>.OffsetA, <#if(bodyCount == 2) {#>prestep.Contact<#=i#>.OffsetA - prestep.OffsetB, <#}#>accumulatedImpulses.Penetration<#=i#>, ref wsvA<#if(bodyCount == 2) {#>, ref wsvB<#}#>);
<#}#>
            TwistFriction<#=suffix#>.WarmStart(prestep.Normal, inertiaA, <#if(bodyCount == 2) {#>inertiaB, <#}#>accumulatedImpulses.Twist, ref wsvA<#if(bodyCount == 2) {#>, ref wsvB<#}#>);
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Solve(in Vector3Wide positionA, in QuaternionWide orientationA, in BodyInertiaWide inertiaA, <#if(bodyCount == 2) {#>in Vector3Wide positionB, in QuaternionWide orientationB, in BodyInertiaWide inertiaB, <#}#>float dt, float inverseDt, ref Contact<#=contactCount#><#=suffix#>PrestepData prestep, ref Contact<#=contactCount#>AccumulatedImpulses accumulatedImpulses, ref BodyVelocityWide wsvA<#if(bodyCount == 2) {#>, ref BodyVelocityWide wsvB<#}#>)
        {            
            //Note that we solve the penetration constraints before the friction constraints. 
            //This makes the friction constraints more authoritative, since they happen last.
            //It's a pretty minor effect either way, but penetration constraints have error correction feedback- penetration depth.
            //Friction is velocity only and has no error correction, so introducing error there might cause drift.
            SpringSettingsWide.ComputeSpringiness(prestep.MaterialProperties.SpringSettings, dt, out var positionErrorToVelocity, out var effectiveMassCFMScale, out var softnessImpulseScale);
            var inverseDtWide = new Vector<float>(inverseDt);
<#for (int i = 0; i < contactCount; ++i) {#>
            PenetrationLimit<#=suffix#>.Solve(inertiaA<#=bodyCount == 2 ? ", inertiaB" : ""#>, prestep.Normal, prestep.Contact<#=i#>.OffsetA, <#if(bodyCount == 2) {#>prestep.Contact<#=i#>.OffsetA - prestep.OffsetB, <#}#>prestep.Contact<#=i#>.Depth, positionErrorToVelocity, effectiveMassCFMScale, prestep.MaterialProperties.MaximumRecoveryVelocity, inverseDtWide, softnessImpulseScale, ref accumulatedImpulses.Penetration<#=i#>, ref wsvA<#if (bodyCount == 2) {#>, ref wsvB<#}#>);
<#}#>
            Helpers.BuildOrthonormalBasis(prestep.Normal, out var x, out var z);
<#if (contactCount > 1) {#>
            var premultipliedFrictionCoefficient = new Vector<float>(1f / <#=contactCount#>f) * prestep.MaterialProperties.FrictionCoefficient;
<#}#>
            var maximumTangentImpulse = <#=contactCount > 1 ? "premultipliedFrictionCoefficient" : "prestep.MaterialProperties.FrictionCoefficient"#> * (<#for (int i = 0; i < contactCount; ++i) {#>accumulatedImpulses.Penetration<#=i#><#if(i < contactCount - 1){#> + <#}}#>);
<#if (contactCount > 1) {#>
            FrictionHelpers.ComputeFrictionCenter(<#for (int i = 0; i < contactCount; ++i) {#>prestep.Contact<#=i#>.OffsetA, <#}#><#for (int i = 0; i < contactCount; ++i) {#>prestep.Contact<#=i#>.Depth, <#}#>out var offsetToManifoldCenterA);
<#if (bodyCount == 2) {#>
            Vector3Wide.Subtract(offsetToManifoldCenterA, prestep.OffsetB, out var offsetToManifoldCenterB);
<#}#>
<#} else if(bodyCount == 2) {#>
            Vector3Wide.Subtract(prestep.Contact0.OffsetA, prestep.OffsetB, out var offsetToManifoldCenterB);
<#}#>
            TangentFriction<#=suffix#>.Solve(x, z, <#=contactCount == 1 ? "prestep.Contact0.OffsetA" : "offsetToManifoldCenterA"#><#=bodyCount == 2 ? ", offsetToManifoldCenterB" : ""#>, inertiaA<#=bodyCount == 2 ? ", inertiaB" : ""#>, maximumTangentImpulse, ref accumulatedImpulses.Tangent, ref wsvA<#if (bodyCount == 2) {#>, ref wsvB<#}#>);
<#if (contactCount == 1) {#>
            //If there's only one contact, then the contact patch as determined by contact distance would be zero.
            //That can cause some subtle behavioral issues sometimes, so we approximate lever arm with the contact depth, assuming that the contact surface area will increase as the depth increases.
            var maximumTwistImpulse = <#=contactCount > 1 ? "premultipliedFrictionCoefficient" : "prestep.MaterialProperties.FrictionCoefficient"#> * accumulatedImpulses.Penetration0 * Vector.Max(Vector<float>.Zero, prestep.Contact0.Depth);
<#} else {#>
            var maximumTwistImpulse = <#=contactCount > 1 ? "premultipliedFrictionCoefficient" : "prestep.MaterialProperties.FrictionCoefficient"#> * (
<#for (int i = 0; i < contactCount; ++i) {#>
                accumulatedImpulses.Penetration<#=i#> * Vector3Wide.Distance(offsetToManifoldCenterA, prestep.Contact<#=i#>.OffsetA)<#=i == contactCount - 1 ? ");" : " +"#>
<#}#>
<#}#>
            TwistFriction<#=suffix#>.Solve(prestep.Normal, inertiaA, <#if (bodyCount == 2) {#>inertiaB, <#}#>maximumTwistImpulse, ref accumulatedImpulses.Twist, ref wsvA<#if (bodyCount == 2) {#>, ref wsvB<#}#>);
        }               
    }
    
    /// <summary>
    /// Handles the solve iterations of a bunch of <#= contactCount #>-contact <#Write(bodyCount == 1 ? "one" : "two");#> body manifold constraints.
    /// </summary>
    public class Contact<#= contactCount #><#=suffix#>TypeProcessor :
        <#Write(bodyCount == 2 ? "Two" : "One");#>BodyContactTypeProcessor<Contact<#= contactCount #><#=suffix#>PrestepData, Contact<#= contactCount #>AccumulatedImpulses, Contact<#= contactCount #><#=suffix#>Functions>
    {
        //Matches UpdateConstraintForManifold's manifoldTypeAsConstraintType computation.
        public const int BatchTypeId = <#Write(bodyCount == 1 ? (contactCount - 1).ToString() : (3 + contactCount).ToString());#>;
    }


<#
    }
}
#>
}
